<script language="JavaScript" type="text/javascript">
    //$(function() {

    //alert($.fn.jquery);

    $.fn.appendVal = function (newPart) {
        return this.each(function () {
            $(this).val($(this).val() + newPart);
        });
    };

    var _apoJsTools_{{ _ctrlPrefix }} = {
        _titre: "Referens Javascript Tools v2.1 ",
        _auteur: "AMU - DOSI <michel.ubeda@univ-amu.fr>",
        _version: "v2.1",
        _dependances: "aucune",
        _lastmaj: "13/08/2018",
        _tipsclass: "bt-popover", // Bootstrap v3.3.5
        _picWait: "{{ asset('bundles/referens/images/loading20.gif') }}",
        _picError: "{{ asset('bundles/referens/images/warning.gif') }}",

        _icoFaColl:{
            'error': '<i class="fas fa-warning"></i>',
            'wait': '<i class="fa fa-spinner fa-spin" style="font-size:24px"></i>',

            'sciences': '<i class="fas fa-flask"></i>',
            'chimie': '<i class="fas fa-flask"></i>',
            'pol': '<i class="fas fa-flask"></i>',

            'eco':'<i class="fas fa-balance-scale"></i>',
            'eco2':'<i class="fas fa-line-chart"></i>',
            'eco3': '<i class="fas fa-money"></i>',
            'drt': '<i class="fas fa-balance-bank"></i>',
            'sport': '<i class="fas fa-bicycle"></i>',
            'sport2': '<i class="fas fa-futbol-o"></i>',
            'letter': '<i class="fas fa-book"></i>',
            'med': '<i class="fas fa-hospital"></i>',
            'pha': '<i class="fas fa-briefcase-medical"></i>',
            'pha2': '<i class="fas fa-medkit"></i>',
            'odo':  '<i class="fas fa-tooth"></i>',
            'groups': '<i class="fas fa-group"></i>',
            'lng': '<i class="fas fa-language"></i>',
            'student': '<i class="fas fa-graduation-cap"></i>',
            'mng': '<i class="fas fa-sitemap"></i>',
            'ventes': '<i class="fas fa-shopping-basket"></i>',
            'ventes2':'<i class="fas fa-shopping-cart"></i>'

        },
        
        //
        /*@description Renvoi un chiffre aléatoire compris entre 'from' et 'to' (optionnel :'len' force le remplissant du résultat avec des zéros pour atteindre la longueur de chaine 'len')
         *@param {int} from le chiffre de debut
         *@param {int} to le chiffre de fin
         *@param {int} len OPTIONEL=formattage en nombre de chiffre (par defaut=10 => 0000000001 )
         *@param {array/int} exceptValues OPTIONEL=valeur(s) interdite(s) : [on boucle et regénère "rnd" tant qu'il fait parties des "exceptValues"...]*/
        rnd: function (from, to, len, exceptValues) {
            if (exceptValues === null) exceptValues = false;
            len = ((!len) ? 10 : len);
            from = ((!from) ? 1 : from);
            to = ((!to) ? 9999999999 : to);
            var rnd = Math.random();
            rnd = eval(rnd * Math.pow(10, len));
            rnd = Math.round(rnd);
            while ((rnd < from) || (rnd > to)) {
                if (rnd < from)rnd = rnd * 2;
                if (rnd > to)rnd = eval(rnd - (rnd / 3));
                rnd = Math.round(rnd);
            }
            // Boucle si rnd [= exceptValues
            if (exceptValues !== false) {
                if ($.isArray(exceptValues)) {
                    for (var i = 0; i < exceptValues.length; i++) {
                        if (rnd === exceptValues[i]) {
                            rnd = _apoJsTools_{{ _ctrlPrefix }}.rnd(from, to, len);
                            i = 0;
                        }
                    }
                }
                else {// oneValue
                    if (rnd === exceptValues) {
                        rnd = _apoJsTools_{{ _ctrlPrefix }}.rnd(from, to, len);
                    }
                }
            }
            return (rnd);
        },
        razCmb: function (id) {
            var e = document.getElementById(id);
            if (e) {
                try {
                    while (e.options.length > 0) {
                        e.options[0] = null;
                    }
                }
                catch (ex) {
                }
            } else {
                     // cas ou selection étape => Num & NumCode n'existe pas ...
                    //alert('razCmb/razCmbValues : id ' + id + " n'existe pas !!!");
            }
        },
        razCmbValues: function (id_list) {
            id_list += ',';
            var aEl = id_list.split(",");
            for (var i = 0; i < aEl.length; i++) if (aEl[i] != '') {
                _apoJsTools_{{ _ctrlPrefix }}.razCmb(aEl[i]);
            }
        },
        str_BetweenAB: function (text, A, B, retStrIncludeAB) {
            if (retStrIncludeAB == null) retStrIncludeAB = false;
            var result = "";
            var posDeb = text.indexOf(A);
            if (posDeb != -1) {
                if (!retStrIncludeAB) posDeb = posDeb + A.length;
                var posFin = text.indexOf(B, posDeb);
                if (retStrIncludeAB) posFin = posFin + B.length;
                if (posFin != -1) if (posFin > posDeb) result = text.slice(posDeb, posFin);
            }
            return (result);
        },
        popoverInfo(ctrl,title,content){

            console.log('popoverInfos... ctrl= %O', ctrl);
            console.log('popoverInfos... title= '+ title);
            console.log('popoverInfos... content= '+ content);

            try{ ctrl.popover('destroy'); } catch (e) { }
            ctrl.popover({
                container: ctrl,
                trigger: 'manual',
                placement: 'right',
                html: true,
                title: title,
                content: content,
                template: '<div class="popover" style="min-width:550px;" role="popover">' +
                '<div class="arrow"></div>' +
                '<h3 class="popover-title"></h3>' +
                '<div class="popover-content"></div>' +
                '</div>'
            }).popover('show');
        },

        initTips: function (defWidth) {

/*
            $("#{{ _ctrlPrefix }}Diplome").children().each(function (i){

                console.log(' #### %O',$(this).context);

                $(this).context.onmouseenter='_apoJsTools_{{ _ctrlPrefix }}.popoverInfo( $(this), $(this).attr("data-title"), $(this).attr("data-content") );';
                //_apoJsTools_{{ _ctrlPrefix }}.popoverInfo( $(this), $(this).attr("data-title"), $(this).attr("data-content"),  );
                //$(this).attr('onmouseout',"try{ $(this).popover('destroy'); } catch (e) { }" );

            });

            $("select option.opt-popover").parent().addClass("sel-popover");


            $("select.sel-popover2").on("mouseenter click",function (e) {
                // console.log("select.sel-popover => mouseenter/mouseover/click %O",e);

                try{ $(this).popover('destroy'); } catch (e) { }
                    var $tip=$(this).find("option:selected"); //
                // .find("option:focus");
                // console.log(":focus-within ="+$(this).find("option:focus-within").val());
                // console.log(":hover Base ="+ $(this).val());
                // console.log(":hover ="+ $(this).find("option:hover").val());
                // console.log(":focus ="+$(this).find("option:focus").val());
                // console.log(":selected ="+$(this).find("option:selected").val());
                // console.log(":focus2 ="+$(this).find(":focus").val());
                // console.log(":hover2 ="+ $(this).find(":hover").val());
                // console.log(":attr focused ="+ $(this).find("*[focused]").val());


                if($tip.attr('value')!==undefined){
                        $(this).popover({
                            container: 'body',
                            trigger: 'manual',
                            placement: 'right',
                            html: true,
                            title: $tip.attr("data-title"),
                            content: $tip.attr("data-content"),
                            template: '<div class="popover" style="min-width:550px;" role="popover">' +
                            '<div class="arrow"></div>' +
                            '<h3 class="popover-title"></h3>' +
                            '<div class="popover-content"></div>' +
                            '</div>'
                        }).popover('show');
                    }

                }
            );
            $("select.sel-popover").on("click",function () {
                try { $(this).popover('destroy'); } catch (e) {}
            });

            $("option.opt-popover").on("blur mouseout mouseleave",function () {
                //$(this).parent().popover('destroy');
            });


            */
/*
.on("click", function() {
                $(this).parent().popover('destroy')
            })

 */



                   if (!defWidth) defWidth = 375;

            try { // Bootstrap popover + convert éventuelles cluetip => popover
                $('.cluetip').each(function (i) {
                    var w = "";
                    try { w = $(this).attr('wtip');} catch (e) {}
                    defWidth = ((w !== "") ? parseInt(w) : defWidth);
                    var title = "";
                    var tip = "";

                    try {
                        var arT = $(this).attr("title").toString().split('|');
                        if (arT.length) {
                            title = arT[0];
                            tip = arT[1];
                        }
                    } catch (e) {}

                    $(this).attr('data-html', 'true');
                    $(this).attr('data-trigger', 'hover');
                    $(this).attr('data-toggle', 'popover');
                    $(this).attr('data-original-title', title);
                    $(this).attr('data-content', tip);
                    $(this).addClass('bt-popover');
                    $(this).removeAttr('title');
                    $(this).popover({
                        template: '<div class="popover" style="width: ' + defWidth + 'px;" role="popover">' +
                        '<div class="arrow"></div>' +
                        '<h3 class="popover-title"></h3>' +
                        '<div class="popover-content"></div>' +
                        '</div>'
                    });
                    $(this).removeClass('cluetip');
                });

                $('[data-toggle="popover"],.bt-popover').popover({
                    template: '<div class="popover" style="width:'+defWidth+'px;" role="popover">' +
                    '<div class="arrow"></div>' +
                    '<h3 class="popover-title"></h3>' +
                    '<div class="popover-content"></div>' +
                    '</div>'
                });

            } catch (e) {
                alert("error _apoJsTools_{{ _ctrlPrefix }}.iniTips...\n" + e.toString());
            }
        },

        /**
         * @description Fonction AJAX d'ajout d'infos générique sur PLUSIEURS éléments HTMLs en même temps
         * @since 18/12/2009
         * @param id (string) listes des id de l' élément HTML à modifier ; SI id="" => affichage boite dialogue JS ALERT()
         * @param src (string) l'adresse (url) de l'ajax à appeler
         * @param params (array) la suite successive des paramètre nécéssaire à l'exec de la cmd Ajax
         *  <br>[OPTION] params['tipsWith'] => permet de définir la taille de la fenêtre d'informations 'tooltips'
         *  <br>[OPTION] params['timeout'] => permet de définir le timeout (en milisecondes) d'exécution ajax (défaut: 5000)
         *  <br>[OPTION] params['async'] => permet de définir le type d' httpRequest à exécuter asynchone (async=true) ou synchrone (bloquant) (défaut: true=> async)
         *  <br>[OPTION] params['crossDomain'] => permet de définir si l'exécution ajax acceptera le multi-domaine (défaut: true)
         * @return (boolean) true/false état de l'exécution AJAX (réussis/échoué)
         */
        ajx2: function (id, src, params) {
            var raz = true, bresult = false;
            if (id)
                if (id !== "") { // décortiques options Spéciales
                    if (id.substring(0, 1) == "+") {
                        raz = false;
                        id = id.slice(1);
                    }
                    //
                    if (document.getElementById(id)) {
                        // Valeur par Défauts:
                        var defOptContainer='a';
                        var defTipsWidth = 450;
                        var defTimeout = 25000; // 25 sec
                        var defAsync = true;
                        var defCrossDomain = true;
                        var defValue = "";
                        var firstEmpty = true;
                        var firstEmptyValue="";
                        var firstEmptyText="";
                        var counter = false;
                        var vlen = 0;
                        //
                        var arParams = "";
                        // var p=0;
                        if (params) {
                            var arP = new Array();
                            arParams = jQuery.param(params, true);
                            if (arParams != "") {
                                var tmpAr = arParams.split('&');
                                for (var i = 0; i < tmpAr.length; i++) {
                                    var tmpAr2 = tmpAr[i].split('=');
                                    arP[tmpAr2[0]] = tmpAr2[1];
                                }
                                // Récupérations des paramètres en options...
                                if (arP['optContainer'] !== undefined) defOptContainer = arP['optContainer'];
                                if (arP['tipsWidth'] !== undefined) defTipsWidth = arP['tipsWidth'];
                                if (arP['timeout'] !== undefined) defTimeout = arP['timeout'];
                                if (arP['async'] !== undefined) defAsync = (arP['async']);
                                if (arP['crossDomain'] !== undefined && (arP['crossDomain'] == "false")) defCrossDomain = false;
                                if (arP['value'] !== undefined) defValue = arP['value'];
                                if (arP['addFirstEmptyValue'] !== undefined && (arP['addFirstEmptyValue'] == "false")) firstEmpty = false;
                                if (arP['firstEmptyValue'] !== undefined) firstEmptyValue = arP['firstEmptyValue'];
                                if (arP['firstEmptyText'] !== undefined) firstEmptyText = arP['firstEmptyText'];
                                if (arP['addValuesCounter'] !== undefined && (arP['addValuesCounter'] == "true")) counter = true;
                            }
                        }

                        $.ajax( {
                            type: 'POST',
                            url: src,
                            data: params,
                            async: defAsync,
                            timeout: defTimeout,
                            crossDomain: true,
                            dataType: 'json',
                            beforeSend: function () { // on ajoute l'image d'attente...
                                if ($('#_' + id).attr('type') != 'hidden') {
                                    $('#' + id).after('<span class="pull-right wait' + id + '"><img align="absmiddle" src="' + _apoJsTools_{{ _ctrlPrefix }}._picWait + '" / >Chargement...</span>');
                                }
                                if (counter)
                                    if ($('#_counter' + id)) $('#_counter' + id).remove();
                            },
                            error: function (jqXHR, textStatus, errorThrown) { // traitement erreur
                                if (textStatus !== "abort") {
                                    var errTxt = "<font color=red><b>ERROR</b> " + textStatus + "=> on _apoJsTools_{{ _ctrlPrefix }}.ajx2(id='" + id + "', src='" + src + "', params=" + ((params !== null) ? arParams : "") + ")\n\t Error: =>\n" + errorThrown + "</font>";
                                    if (document.getElementById(id).type !== 'hidden') {
                                        $('<img onDblclick="$(this).remove();" class="pull-right tooltip" title="' + errTxt + '" id=_error' + id + ' align="absmiddle" src=' + _apoJsTools_{{ _ctrlPrefix }}._picError + ' / >').insertAfter('#' + id);
                                    }
                                    else alert(errTxt);
                                }
                            },
                            success: function (data, textStatus, jqXHR) { // traitement réponse JSON
                                if (textStatus === "success")
                                    if (id === "#") {
                                        // var SESSION...
                                    }
                                    else if (id !== "") {
                                        var alertMsg = "";
                                        var e = document.getElementById(id);
                                        switch (e.type) { //$('#'+id).attr('type')
                                            case "button":
                                            case "submit":
                                            case "reset":
                                            case "file":
                                                break;/*aucune modif*/
                                            case "radio":
                                            case "checkbox":
                                                //var lbl=document.createElement('span');
                                                //@todo à faire.. ajout pour chaque radio bouton un libellé, + en input hidden correspondants à tout les valeurs JSON...

                                                break;
                                            case "select-one":
                                            case "select-multiple":
                                            case "select":

                                                if (raz) { /* vidange els */
                                                    $("select[id^='"+id+"']").empty();
                                                }
                                                var tips_active = false;
                                                // Boucle d'insertions des valeurs

                                                $("select[id^='"+id+"']").empty();
                                                $("select[id^='"+id+"'] option").on('inserted.bs.tooltip', function () {
                                                    console.log("inserted.bs.tooltip on ID="+id);
                                                });

                                                if(firstEmpty){
                                                    var $opt0=$("<option></option>").val(firstEmptyValue).html(firstEmptyText);
                                                    $("select[id^='"+id+"']").append($opt0);
                                                }

                                                if(data!== null){

                                                    var tips_active = false;

                                                    var optAlerts=[];
                                                    $.each(data, function () {
                                                        var val = this['value'];
                                                        var txt=  ($.trim(this['label']) != '')? this['label']: this['value'];

                                                        var $opt=$("<option></option>").val(this['value']).html(txt);

                                                        if (val == defValue) {
                                                            $opt.attr('selected', 'selected');
                                                        }

                                                        if($.trim(this['tips']) != ''){
                                                            $opt.attr('title',this['tips']);
                                                            $opt.attr('data-html',"true");
                                                            $opt.attr('data-title',txt);
                                                            $opt.attr('data-toggle',"tooltip");
                                                            $opt.attr('data-placement',"right");
                                                            $opt.attr('class',"optTip");
                                                            tips_active = true;
                                                        }

                                                        if ($.trim(this['bgcolor']) != '') {
                                                            $opt.css('background-color', this['bgcolor']);
                                                            $opt.addClass((this['bgcolor']).replace("#", ""));
                                                        }
                                                        //                        if(typeof(this['class'])!='undefined')
                                                        if ($.trim(this['class']) != '') {
                                                            $opt.addClass((this['class']));
                                                        }
                                                        //                        if(typeof(this['value2'])!='undefined')

                                                        for(var d in ['etp','dip', 'ver']){
                                                            if (this[d]!==undefined) {
                                                                $opt.attr('data-'+d, this[d]);
                                                            }
                                                        }

                                                        if ($.trim(this['alert']) != '') {
                                                            optAlerts.add ( this['alert'] );
                                                            alertMsg = this['alert'];
                                                        }

                                                        $("select[id^='"+id+"']").append($opt);
                                                    });


                                                    if (optAlerts.length>0) {
                                                        $('#' + id).after('<img align="absmiddle" src="' + _apoJsTools_{{ _ctrlPrefix }}._picError + '" class="' + _apoJsTools_{{ _ctrlPrefix }}._tipsclass + '" title="Avertissement|' + optAlerts.join("<hr>\n") + '" onclick=$(this).trigger("hideCluetip");$(this).remove(); / ></span>');
                                                        _apoJsTools_{{ _ctrlPrefix }}.initTips(800); // définie dans base.html.twig
                                                    }


                                                    //$("select[id^='"+id+"'] option" ).tooltip();

                                                    $("select[id^='"+id+"']").css("width", "auto");

                                                    //
                                                    // $("badselect[id^='"+id+"']").selectmenu()
                                                    //     .data( "ui-selectmenu" )._renderItem = function( ul, item ) {
                                                    //
                                                    //     if(item==undefined){
                                                    //         return ul;
                                                    //     }
                                                    //
                                                    //     if(!item){
                                                    //         return ;
                                                    //     }
                                                    //
                                                    //     //console.log('add optGoolTip value=%O', item);
                                                    //
                                                    //         /*
                                                    //
                                                    //             $(ul).css({ "max-height": "250px", "overflow-y":"auto" , "overflow-x": "hidden" });
                                                    //             return $( "<li>" )
                                                    //                 .attr( "title", optGoolTip)
                                                    //                 .append( $( "<a class='optGoolTip' ><nobr>" +
                                                    //                     ((item.edupersonprimaryaffiliation[0]=='o')?"<span style='color:gray;text-decoration:line-through;'>":"") +
                                                    //                     "<img align='absmiddle' src='"+adt.getIco(item.edupersonprimaryaffiliation)+"' /><img align='absmiddle' src='"+adt.getIco2(item.supannentiteaffectationprincipale)+"' />&nbsp;" + item.cn + " <b>(P"+ adt.normJSON(item.amuperimetre) +")</b>" +  ((item.edupersonprimaryaffiliation[0]=='o')?"</span>":"")
                                                    //                     + "</nobr></a>" ) )
                                                    //                 .appendTo( ul );
                                                    //
                                                    //         */
                                                    //         var li = $( "<li>" ).css( "background-color", item.element.attr('value'));
                                                    //
                                                    //         if ( item.disabled ) {
                                                    //             li.addClass( "ui-state-disabled" );
                                                    //         }
                                                    //
                                                    //         li.attr( "title", item.element.attr('title' ));
                                                    //         this._setText( li, item.element.attr('label') +" * => " );
                                                    //         li.addClass( "optGoolTip" );
                                                    //
                                                    //             li.tooltip();
                                                    //
                                                    //         return li.appendTo( ul );
                                                    //
                                                    //
                                                    //     };
                                                    //

                                                    // $('.optGoolTip').tooltip();

                                                    /*
                                                    $("select[id^='"+id+"']" ).popover({
                                                        content: function(){ return $(this).attr('title'); }, // '[title], [data-original-title]',
                                                        'html': true,
                                                        'trigger': 'over',
                                                        'template' :'<div class="tooltip" role="tooltip">TEST<div class="tooltip-arrow"></div><div class="alert alert-info well-sm" class="tooltip-inner"></div></div>'
                                                    });

                                                    */
                                                    $("select[id^='"+id+"'] option").on('shown.bs.tooltip', function () {
                                                       console.log("shown.bs.tooltip on ID="+id);
                                                    });

                                                    $("select[id^='"+id+"'] option").on('hidden.bs.tooltip', function () {
                                                        console.log("hidden.bs.tooltip on ID="+id);
                                                    });

                                                }
                                                var zdata=null;


                                                if (zdata !== null)
                                                    for (var k in data) {
                                                        var oneData = data[k];
                                                        if (oneData !== null) {
                                                            if (oneData['alert'] != '') alertMsg = oneData['alert'];
                                                            var val = oneData['value'];
                                                            var txt = val;
                                                            if ($.trim(oneData['label']) != '')  txt = oneData['label'];
                                                            var opt = document.createElement('option');
                                                            opt.text = txt;
                                                            opt.label = txt;
                                                            opt.value = val;

                                                            opt.title= oneData['tips'];

                                                            $(opt).attr('data-html',"true");
                                                            $(opt).attr('data-title',oneData['label']);
                                                            $(opt).attr('data-toggle',"tooltip");
                                                            $(aOpt).attr('class',"optTip");


                                                            if (val == defValue) $(opt).attr('selected', 'selected');
                                                            var useTips=false
                                                            //
                                                            //
                                                            // if(typeof(oneData['tips'])!=='undefined')
                                                            if((useTips) && ($.trim(oneData['tips']) != '')) {

                                                                var aOpt = document.createElement('a');

                                                                //$(aOpt).attr('class',"optPopover");
                                                                $(aOpt).attr('data-toggle',"popover");
                                                                //$(aOpt).attr('data-toggle',"tooltip");

                                                                $(aOpt).attr('data-container',"body");
                                                                //$(aOpt).attr('data-container',"#"+id);
                                                                // $(aOpt).attr('data-trigger',"hover");
                                                                $(aOpt).attr('data-title',oneData['label']);
                                                                $(aOpt).attr('data-content',oneData['tips']);
                                                                $(aOpt).attr('data-html',"true");


                                                                aOpt.title= oneData['tips'];
                                                                aOpt.text= oneData['label']

                                                                $(aOpt).click(function(){
                                                                    console.log("enter aOpt %O",$(this));
                                                                });


                                                                $(aOpt).tooltip();


                                                                opt.text="";
                                                                $(opt).append(aOpt);

                                                                opt.addEventListener("mouseenter", function( event ) {
                                                                    console.log("mouseenter aOpt %O",$(this),true);

                                                                });
                                                                opt.addEventListener("mouseover", function( event ) {
                                                                    console.log("mouseover aOpt %O",$(this),true);

                                                                });

                                                                    /*

                                                                document.onpropertychange = function(evt) {
                                                                    if (window.event.propertyName == "title") {
                                                                        var t = evt.target;
                                                                        if(t==""){

                                                                        }
                                                                    }
                                                                };
                                                                */
                                                                    try {

                                                                }/*IEonly*/ catch (ex) {
                                                                    //opt.add(aOpt, null);

                                                                }


                                                                //$(opt).addClass('tooltip');

                                                                //$(opt).addClass('opt-popover');
                                                                //$(opt).addClass(_apoJsTools_{{ _ctrlPrefix }}._tipsclass);
                                                                tips_active = true;
                                                            }
                                                            //                        if(typeof(oneData['bgcolor'])!=='undefined')
                                                            if ($.trim(oneData['bgcolor']) != '') {
                                                                $(opt).css('background-color', oneData['bgcolor']);
                                                                $(opt).addClass((oneData['bgcolor']).replace("#", ""));
                                                            }
                                                            //                        if(typeof(oneData['class'])!='undefined')
                                                            if ($.trim(oneData['class']) != '') {
                                                                $(opt).addClass((oneData['class']));
                                                            }
                                                            //                        if(typeof(oneData['value2'])!='undefined')

                                                            for(var d in ['etp','dip', 'ver']){
                                                                if (oneData[d]!==undefined) {
                                                                    $(opt).attr('data-'+d, oneData[d]);
                                                                }
                                                            }

                                                            // rajout de l'option...
                                                            try {
                                                                e[e.length] = opt;
                                                                /*IEonly*/
                                                            } catch (ex) {
                                                                e.add(opt, null);
                                                                /* Std compliant*/
                                                            }

                                                            $(opt).tooltip({

                                                            });


                                                        }

                                                    }
                                                if (tips_active) {


                                                    $('.optTooltip').tooltip();
                                                    //'#'+id+' option '+defOptContainer+

                                                        $(this).on('mouseenter',function(){
                                                            console.log("enter %O",$(this).parent().attr('value'));
                                                        });

                                                        /*
                                                        $(this).parent().parent().
                                                        popover({
                                                            template: '<div class="popover" style="width:' + defTipsWidth + 'px;" role="popover">' +
                                                            '<div class="arrow"></div>' +
                                                            '<h3 class="popover-title"></h3>' +
                                                            '<div class="popover-content"></div>' +
                                                            '</div>'
                                                        });
                                                        */


 /*
                                                    */
                                                    // traitement post insertions valeurs
                                                    //_apoJsTools_{{ _ctrlPrefix }}.initTips(defTipsWidth); // définie dans base.html.twig
                                                    /*
                                                    $("#"+id).popover({
                                                        //'container': "#"+id,
                                                        'trigger':"click",
                                                        'html':true,
                                                        'placement': 'right',

                                                        'content': function (){ $(this).find("option:selected").attr('data-content') },
                                                        'title': function (){ $(this).find("option:selected").attr('data-title') },
                                                        'template': '<div class="popover" style="width:'+defTipsWidth+'px;" role="popover">' +
                                                        '<div class="arrow"></div>' +
                                                        '<h3 class="popover-title"></h3>' +
                                                        '<div class="popover-content"></div>' +
                                                        '</div>'
                                                    });
                                                    */

                                                }
                                                if (counter){
                                                    vlen = $("#" + id + " > option").length;
                                                    if(firstEmpty){
                                                        vlen = vlen - 1;
                                                    }
                                                }
                                                break;

                                            case "hidden":
                                            case "password":
                                            case "text":
                                            case "textarea":
                                                if (data) {
                                                    var oneData = eval(data);              //if($('.wait'+id))
                                                    $("#" + id).val(oneData[0]['value']).change();
                                                }
                                                if (counter) vlen = data.length;

                                                break;

                                            default:/*Balise HTML: A, P, DIV...*/
                                                try {
                                                    if (data) {
                                                        var oneData = eval(data);
                                                        $("#" + id).html(oneData[0]['value']).change();
                                                    }

                                                }
                                                catch (er) {
                                                    var errTxt = "<font color=red><b>ERROR</b> on _apoJsTools_{{ _ctrlPrefix }}.ajx2(id='" + id + "', src='" + src + "', params=" + arParams + ")<br>Error: <pre>" + er.toString() + "</pre></font><hr>";
                                                    if ($('#_' + id).attr('type') != 'hidden') {
                                                        $('<img onDblclick="$(this).remove();" class="' + _apoJsTools_{{ _ctrlPrefix }}._tipsclass + '" title="' + errTxt + '" id=_error' + id + ' align="absmiddle" src=' + _apoJsTools_{{ _ctrlPrefix }}._picError + ' / >').insertAfter('#' + id);
                                                    }
                                                    else
                                                        alert("ERROR on 'hidden' control =>" + errTxt);
                                                    er = null;
                                                }
                                                if (counter) vlen = data.length;
                                                break;

                                        }	//try{ e.onchange();}catch(er){} => no need $ > event

                                        if (e.type !== "hidden")
                                            if (counter) {
                                                $('#' + id).after('<span class="pull-right" id="_counter' + id + '" style="color:gray">(' + vlen + ')</span>');
                                            }

                                        // on supprime l'image d'attente...
                                        if ($('#_wait' + id)) $('#_wait' + id).remove();
                                        $('.wait' + id).remove();

                                    } // fin if id!==""
                                    else {
                                        alert("RESULT _apoJsTools_{{ _ctrlPrefix }}.ajx2(id='" + id + "', src='" + src + "', params=" + params + ")÷\n\t  Data =>\n" + data);
                                    }

                                if ($.trim(alertMsg) != "") {
                                    $('#' + id).after('<img align="absmiddle" src="' + _apoJsTools_{{ _ctrlPrefix }}._picError + '" class="' + _apoJsTools_{{ _ctrlPrefix }}._tipsclass + '" title="Avertissement|' + alertMsg + '" onclick=$(this).trigger("hideCluetip");$(this).remove(); / ></span>');
                                    _apoJsTools_{{ _ctrlPrefix }}.initTips(800); // définie dans base.html.twig
                                }
                                bresult = true;
                            }
                        });
                    }
                }

            return bresult;
        },

        /** @description Init comboBox avec liste de valeur donnée (options : tips, bg col, class
         @param {string} id l'Id de l'élément à initialiser
         @param {string} listValues les items à ajouter
         @param {bool} addfirstempty option ajouter une valeur vide an début oui/non [défault:true]
         @version 2.0
         NOTES :
         Chaque item peux avoir un couple valeur/libellé (séparateur '=') "val=Mon Libellé"
         Chaque item peux avoir des options (séparateur item/option  '|'):
         USAGE :
         _apoJsTools_{{ _ctrlPrefix }}.initCmb("monIDCombo","val1=Libellé val1|tips val1|col fond val1,valN=Libellé val N||tips valN|col fond valN",true/false);
         */
        initCmb: function (id, listValues, addfirstempty,selValue) {
            var e = document.getElementById(id);
            addfirstempty = (addfirstempty == null) ? true : addfirstempty;
            if (e != null) {
                try {
                    _apoJsTools_{{ _ctrlPrefix }}.razCmb(id);
                } catch (ex) {
                }
                if (addfirstempty) {    /* ajout 1ier val à "" */
                    var opt0 = document.createElement('option');
                    opt0.text = "";
                    opt0.value = "";
                    opt0.label = "";
                    try {
                        e.add(opt0);
                    }/*IEonly*/ catch (ex) {
                        try {
                            e.add(opt0, null);
                        } catch (ex) {
                        }
                    }
                    /*allOthers*/
                }
                var tab = Array();
                if (listValues != undefined)  if (listValues != null) if (listValues.length > 1) tab = listValues.split(",");
                for (var i = 0; i < tab.length; i++) /*ajout des autres vals*/
                {
                    var val = tab[i].replace('=', '');
                    var txt = tab[i].replace('=', '');
                    var tips = cls = bg = "";
                    try {
                        var tabText = tab[i].toString().split("=");
                        if (tabText.length > 1) {
                            if (tabText != null)if (tabText[0] != null) val = tabText[0];
                            if (tabText[1] != null) txt = tabText[1];
                        }
                    } catch (ex) {
                    } //ex=null; continue;
                    try {
                        var tabText2 = txt.toString().split("|");
                        if (tabText2 != null)if (tabText2[1] != null) txt = tabText2[0];
                        if (tabText2[1] != null) tips = tabText2[1];
                        if (tabText2[2] != null) bg = tabText2[2];
                        if (tabText2[3] != null) cls = tabText2[3];
                    } catch (ex) {
                    } //ex=null; continue;
                    var opt = document.createElement('option');
                    opt.text = txt;
                    opt.label = txt;
                    opt.value = val;

                    if(selValue){
                        if(selValue==val){
                            $(opt).attr('selected','selected');
                        }
                    }

                    if(tab.length==1){
                        e.disabled=true;
                        $(e).attr('disabled','disabled');
                        $(e).addClass("disabled");
                        $(e).disabled=true;
                       //e.attributes.add('disabled');
                    }

                    if (typeof(tips) != undefined)
                        if (tips != "") {
                            $(opt).attr('title', tips);
                            $(opt).addClass(_apoJsTools_{{ _ctrlPrefix }}._tipsclass);
                            tips_active = true;
                            if (typeof(bg) != undefined)
                                if (bg != "") $(opt).css('background', bg);
                            if (cls != "") $(opt).addClass(cls);
                        }
                    try {
                        e[e.length] = opt;
                        /*IEonly*/
                    } catch (ex) {
                        e.add(opt, null);
                        /* Std compliant*/
                    }

                }
            }
        },

        initCursus: function (apo,fav) {
            if(apo==undefined){ apo=false; }
            if(fav==undefined){ fav=true; }
            _apoJsTools_{{ _ctrlPrefix }}.razCmb("{{ _ctrlPrefix }}Cursus");
            _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Cursus", "{{ path("apoTypeDiplomes") }}", { 'apo': apo, 'fav': fav, async: ($("#{{ _ctrlPrefix }}Cursus").attr('init')===null), addValuesCounter: true, value: $("#{{ _ctrlPrefix }}Cursus").attr('init') });
            /*
            if (all) {
                _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Cursus", "{ { path("apoTypeDiplomes") }}", { apogee: (all), favorites: true, async: ($("#{{ _ctrlPrefix }}Cursus").attr('init')===null), addValuesCounter: true, value: $("#{{ _ctrlPrefix }}Cursus").attr('init') });
            } else {
                _apoJsTools_{{ _ctrlPrefix }}.initCmb("{{ _ctrlPrefix }}Cursus", "L=Licences,LP=Licences Pro,M=Masters,null=Autres (DU DESU...),all=TOUS");
                if( $("#{{ _ctrlPrefix }}Cursus").attr('init') ){
                    $("#{{ _ctrlPrefix }}Cursus").val( $("#{{ _ctrlPrefix }}Cursus").attr('init') );
                }else{
                    $("#{{ _ctrlPrefix }}Cursus").val("all");
                }
            }*/
            $("#{{ _ctrlPrefix }}CursusCode").html( $("#{{ _ctrlPrefix }}Cursus").val() );
        },

        initDiplomeFromList(listDip){
            var selDip="";
            if(listDip.indexOf(',')==-1){
                var arVal=listDip.split("=");
                selDip=arVal[0];
            }
            _apoJsTools_{{ _ctrlPrefix }}.initCmb("{{ _ctrlPrefix }}Diplome",listDip,false,selDip);
        },
        initComposantes(){
            _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Compo", "{{ path("apoComposantes") }}",{
                'addValuesCounter': true,
                'arNatCmp': $("[name={{ _ctrlPrefix }}ComposanteType]:checked").val(),
                'temEnService': $("[name={{ _ctrlPrefix }}ComposanteEnService]:checked").val(),
                'temElc': $("[name={{ _ctrlPrefix }}ComposanteELC]:checked").val(),
                'debug': ($("#{{ _ctrlPrefix }}ComposanteDebug:checked").length>0),
                'fullinfos': ($("#{{ _ctrlPrefix }}ComposanteTipsFullInfos:checked").length>0),
                'value': $("#{{ _ctrlPrefix }}Compo").attr('init')
            });
        },
        initEtuSelector: function (all,fav) {

            var listY= $("#{{ _ctrlPrefix }}Year").attr('listYears');
            if(listY!=""){ // (listY!="")
                var selY="";
                if(listY.indexOf(',')==-1){
                    var arVal=listY.split("=");
                    selY=arVal[0];
                }else{
                    selY=$("#{{ _ctrlPrefix }}Year").attr('init');
                }
                _apoJsTools_{{ _ctrlPrefix }}.initCmb("{{ _ctrlPrefix }}Year",listY,false,selY);
                //$("#{{ _ctrlPrefix }}YearCode").html( $("#{{ _ctrlPrefix }}Year").attr('init') );

            }else{
                {% set listYear="" %}{% for y in 2006.."now"|date("Y")+1 %}{% set listYear=listYear~((listYear!="")?",":"")~y %}{% endfor %}
                _apoJsTools_{{ _ctrlPrefix }}.initCmb("{{ _ctrlPrefix }}Year", "{{ listYear|raw }}");
                var curY ={{ ("now"|date("Y")>9)?"now"|date("Y"):("now"|date("Y")-1) }};
                $("#{{ _ctrlPrefix }}Year").val(curY);
            }


            if( $("#{{ _ctrlPrefix }}Year").attr('init') ){
                $("#{{ _ctrlPrefix }}Year").val( $("#{{ _ctrlPrefix }}Year").attr('init'));
            }

            var listCmp= $("#{{ _ctrlPrefix }}Compo").attr('listComposantes');
            if(listCmp!=""){
                var selCmp="";
                if(listCmp.indexOf(',')==-1){
                    var arVal=listCmp.split("=");
                    selCmp=arVal[0];
                }else{
                    selCmp=$("#{{ _ctrlPrefix }}Compo").attr('init');
                }

                _apoJsTools_{{ _ctrlPrefix }}.initCmb("{{ _ctrlPrefix }}Compo",listCmp,false,selCmp);
                $("#{{ _ctrlPrefix }}CompoCode").html( $("#{{ _ctrlPrefix }}Compo").attr('init') );

            }else{
                _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Compo", "{{ path("apoComposantes") }}",{
                    async:false,
                    'addValuesCounter': true,
                    'arNatCmp': $("[name={{ _ctrlPrefix }}ComposanteType]:checked").val(),
                    'temEnService': $("[name={{ _ctrlPrefix }}ComposanteEnService]:checked").val(),
                    'temElc': $("[name={{ _ctrlPrefix }}ComposanteELC]:checked").val(),
                    'debug': ($("#{{ _ctrlPrefix }}ComposanteDebug:checked").length>0),
                    'fullinfos': ($("#{{ _ctrlPrefix }}ComposanteTipsFullInfos:checked").length>0),
                    'value': $("#{{ _ctrlPrefix }}Compo").attr('init')
                });
                $("#{{ _ctrlPrefix }}CompoCode").html( $("#{{ _ctrlPrefix }}Compo").attr('init') );
            }

            var listCur= $("#{{ _ctrlPrefix }}Cursus").attr('listCursus');
            selCur=$("#{{ _ctrlPrefix }}Cursus").attr('init');
            if(listCur!=""){
                var selCur="";
                if(listCur.indexOf(',')==-1){
                    var arVal=listCur.split("=");
                    selCur=arVal[0];
                    // $("#{{ _ctrlPrefix }}Cursus").attr('disabled','disabled');
                    // $("#{{ _ctrlPrefix }}Cursus").addClass("disabled");
                }
                _apoJsTools_{{ _ctrlPrefix }}.initCmb("{{ _ctrlPrefix }}Cursus",listCur,false,selCur);
            }
            else{
                _apoJsTools_{{ _ctrlPrefix }}.initCursus(all,fav);
            }
            $("#{{ _ctrlPrefix }}CursusCode").html(selCur);

            if( $("#{{ _ctrlPrefix }}Diplome").attr('init') ){
                $('.{{ _ctrlPrefix }}FilterItem').attr("disabled","disabled");

                // $("#{{ _ctrlPrefix }}Compo").val( $("#{{ _ctrlPrefix }}Compo").attr('init') );
                // $("#{{ _ctrlPrefix }}CompoCode").html( $("#{{ _ctrlPrefix }}Compo").attr('init') );

                var listDip=$("#{{ _ctrlPrefix }}Diplome").attr('listDiplomes');
                if(listDip!=""){ //$("#{{ _ctrlPrefix }}Diplome[listDiplomes]").length>0){
                    _apoJsTools_{{ _ctrlPrefix }}.initDiplomeFromList(listDip);
                    alert("initDiplomeFromList(listDip) ='"+listDip+"'");
                }else{
                    _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Diplome", "{{ path("apoDipCompoLMD") }}", {
                        "lic": ($("#{{ _ctrlPrefix }}DiplomeLic:checked").length>0),
                        "temoinOuvert":  $("[name={{ _ctrlPrefix }}DiplomeEnService]:checked").val(),
                        "fullinfos": ($("#{{ _ctrlPrefix }}DiplomeTipsFullInfos:checked").length>0),
                        "debug": ($("#{{ _ctrlPrefix }}DiplomeDebug:checked").length>0),

                        "year": $("#{{ _ctrlPrefix }}Year").attr('init'),
                        "codCur": $("#{{ _ctrlPrefix }}Cursus").attr('init'),
                        "arCodCompos": $("#{{ _ctrlPrefix }}Compo").attr('init'),
                        "addValuesCounter": true,
                        'value': $("#{{ _ctrlPrefix }}Diplome").attr('init'),
                        'async': false,
                    });
                }



                $("#{{ _ctrlPrefix }}DiplomeCode").html( $("#{{ _ctrlPrefix }}Diplome").attr('init') );

                if( $("#{{ _ctrlPrefix }}Etape").attr('init') ) {
                    $("#{{ _ctrlPrefix }}Etape").val($("#{{ _ctrlPrefix }}Etape").attr('init'));
                    $("#{{ _ctrlPrefix }}EtapeCode").html( $("#{{ _ctrlPrefix }}Etape").attr('init') );

                    var dipVer=$("#{{ _ctrlPrefix }}Diplome").attr('init').split('v');

                    _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Etape", "{{ path("apoEtapesOfDipVrs") }}", {
                        "temoinOuvert":  $("[name={{ _ctrlPrefix }}EtapeEnService]:checked").val(),
                        "lic": ($("#{{ _ctrlPrefix }}EtapeLic:checked").length>0),
                        "fullinfos": ($("#{{ _ctrlPrefix }}EtapeTipsFullInfos:checked").length>0),
                        "debug": ($("#{{ _ctrlPrefix }}EtapeDebug:checked").length>0),
                        //"tipsWidth": 550,
                        "codDip": dipVer[0],
                        "verDip": parseInt(dipVer[1]),
                        "year": $("#{{ _ctrlPrefix }}Year").attr('init'),
                        "addValuesCounter": true,
                        'value': $("#{{ _ctrlPrefix }}Etape").attr('init'),
                        'async': false,
                    });

                    var etpVer=$("#{{ _ctrlPrefix }}Etape").attr('init').split('v');

                    _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Num", "{{ path("apoListeEtudiants") }}", {
                        "addValuesCounter": true,
                        "year": $("#{{ _ctrlPrefix }}Year").attr('init'),
                        "codDip": dipVer[0],
                        "verDip": parseInt(dipVer[1]),
                        "codEtp": etpVer[0],
                        "verEtp": parseInt(etpVer[1]),
                        "addValuesCounter": true,
                        'value': $("#{{ _ctrlPrefix }}Num").attr('init'),
                        'async': false,
                    });

                    $('#{{ _ctrlPrefix }}NumCode').html( $("#{{ _ctrlPrefix }}Num").attr('init') );
                    $('.{{ _ctrlPrefix }}FilterItem').removeAttr("disabled");

                    /*
                    //version converte list size=1
                    $("#{{ _ctrlPrefix }}Etape").mouseover(function(){
                        var n = $("select option").length;
                        $(this).attr("size", n);
                        $(this).attr("multiple", false);
                    });

                    $("#{{ _ctrlPrefix }}Etape").mouseout(function(){
                        $(this).attr("size", 1);
                    });
                    $("#{{ _ctrlPrefix }}Etape").on('mouseenter','option',function(e) {
                        var $target = $(e.target);
                        console.log($target.text());
                    });
                    */
                }
            }else{
                $("#{{ _ctrlPrefix }}Compo").val("");
            }

            /*
            $("#{{ _ctrlPrefix }}Diplome,#{{ _ctrlPrefix }}Etape").each(function (i){
                $(this).selectmenu();
                $(this).on( "selectmenufocus", function( event, ui ) {
                    //console.log("selectmenufocus ui.item/data-title %O",$(ui.item.element).attr("data-title"));
                    //console.log("selectmenufocus ui.item/data-content %O",$(ui.item.element).attr("data-content"));
                    try{ $(ui.item.element).popover('destroy'); } catch (e) { }
                    $(ui.item.element).popover({
                        container: $(this),
                        trigger: 'manual',
                        placement: 'right',
                        html: true,
                        title: $(ui.item.element).attr("data-title"),
                        content: $(ui.item.element).attr("data-content"),
                        template: '<div class="popover" style="min-width:550px;" role="popover">' +
                        '<div class="arrow"></div>' +
                        '<h3 class="popover-title"></h3>' +
                        '<div class="popover-content"></div>' +
                        '</div>'
                    }).popover('show');
                });
            });
            */



        },
        selectedText: function (o) {
            var t = "";
            try {
                t = o.options[o.selectedIndex].text;
            } catch (e) {
            }
            return (t);
        },
        changeYear: function (y) {
            $("#{{ _ctrlPrefix }}Year").val(y);
            _apoJsTools_{{ _ctrlPrefix }}.razInfos(2);
            _apoJsTools_{{ _ctrlPrefix }}.majListDip();
            _apoJsTools_{{ _ctrlPrefix }}.majListByYearEtp();
        },
        changeCompo: function (val) {
            _apoJsTools_{{ _ctrlPrefix }}.razCmbValues("{{ _ctrlPrefix }}Etape,{{ _ctrlPrefix }}Diplome,{{ _ctrlPrefix }}Num");
            _apoJsTools_{{ _ctrlPrefix }}.razInfos(2);
            $("#{{ _ctrlPrefix }}CompoCode").html(val);
            _apoJsTools_{{ _ctrlPrefix }}.majListDip();
        },
        changeCursus: function (val) {
            _apoJsTools_{{ _ctrlPrefix }}.razCmbValues("{{ _ctrlPrefix }}Diplome,{{ _ctrlPrefix }}Etape,{{ _ctrlPrefix }}Num");
            _apoJsTools_{{ _ctrlPrefix }}.razInfos(2);
            $("#{{ _ctrlPrefix }}Compo").change();
            $("#{{ _ctrlPrefix }}CursusCode").html(val);
        },
        changeDip: function (val, lib) {
            _apoJsTools_{{ _ctrlPrefix }}.razCmbValues("{{ _ctrlPrefix }}Etape,{{ _ctrlPrefix }}Num");
            _apoJsTools_{{ _ctrlPrefix }}.razInfos(3);
            // var ver = _apoJsTools_{{ _ctrlPrefix }}.str_BetweenAB(lib, "[ver. ", "]");

            var dipVer=val.toString().split('v');
            $("#{{ _ctrlPrefix }}DiplomeCode").html(val);

            _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Etape", "{{ path("apoEtapesOfDipVrs") }}", {
                //"lic": ($("#{{ _ctrlPrefix }}EtapeLic:checked").length>0),
                "temoinOuvert": $("[name={{ _ctrlPrefix }}EtapeEnService]:checked").val(),
                "lic": ($("#{{ _ctrlPrefix }}EtapeLic:checked").length>0),
                "fullinfos": ($("#{{ _ctrlPrefix }}EtapeTipsFullInfos:checked").length>0),
                "debug": ($("#{{ _ctrlPrefix }}EtapeDebug:checked").length>0),
                //"tipsWidth": 550,
                "codDip": dipVer[0],
                "verDip": dipVer[1],
                "year": $("#{{ _ctrlPrefix }}Year").val(),
                "addValuesCounter": true
            });
        },
        changeEtp: function (val, lib) {
            _apoJsTools_{{ _ctrlPrefix }}.razCmb("{{ _ctrlPrefix }}Num");
            _apoJsTools_{{ _ctrlPrefix }}.razInfos(4);
            if(val!=""){

                $("#{{ _ctrlPrefix }}EtapeCode").html(val);
                var etpVer=val.toString().split('v');
                //var ver = _apoJsTools_{{ _ctrlPrefix }}.str_BetweenAB(lib, "[ver. ", "]");
                _apoJsTools_{{ _ctrlPrefix }}.majListByYearEtp();
            }else{
                $("#{{ _ctrlPrefix }}EtapeCode").html("");
            }

        },
        changeEtu: function (num) {
            //_apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}diantUID", "{{ path("apoEtudiantUid") }}", {"etuNum": num});
            $('#{{ _ctrlPrefix }}NumCode').html(num);
        },
        majListByYearEtp: function () {
            if (($("#{{ _ctrlPrefix }}Etape").val() != "") && ($("#{{ _ctrlPrefix }}Year").val() != "")) {

                var dipVer=$("#{{ _ctrlPrefix }}Diplome").val().toString().split('v');
                var etpVer=$("#{{ _ctrlPrefix }}Etape").val().toString().split('v');
                _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Num", "{{ path("apoListeEtudiants") }}", {
                    "addValuesCounter": true,
                    "year": $("#{{ _ctrlPrefix }}Year").val(),
                    "codDip": dipVer[0],
                    "verDip": parseInt(dipVer[1]),
                    "codEtp": etpVer[0],
                    "verEtp": parseInt(etpVer[1]),
                    "addValuesCounter": true
                });
            } else {
                _apoJsTools_{{ _ctrlPrefix }}.razCmbValues("{{ _ctrlPrefix }}Num");
                $('{{ _ctrlPrefix }}NumCode').html("");
            }
        },
        majListDip: function () {
            var listDip=$("#{{ _ctrlPrefix }}Diplome").attr('listDiplomes');
            if(listDip!=""){
                _apoJsTools_{{ _ctrlPrefix }}.initDiplomeFromList(listDip);
            }
            else{
                _apoJsTools_{{ _ctrlPrefix }}.ajx2("{{ _ctrlPrefix }}Diplome", "{{ path("apoDipCompoLMD") }}", {
                    "lic": ($("#{{ _ctrlPrefix }}DiplomeLic:checked").length>0),
                    "temoinOuvert": $("[name={{ _ctrlPrefix }}DiplomeEnService]:checked").val(),
                    "fullinfos": ($("#{{ _ctrlPrefix }}DiplomeTipsFullInfos:checked").length>0),
                    "debug": ($("#{{ _ctrlPrefix }}DiplomeDebug:checked").length>0),

                    "year": $("#{{ _ctrlPrefix }}Year").val(),
                    "codCur": $("#{{ _ctrlPrefix }}Cursus").val(),
                    "arCodCompos": $("#{{ _ctrlPrefix }}Compo").val(),
                    "addValuesCounter": true
                });
            }
        },
        razInfos: function (niv) {
            switch (niv) {
                case 0:
                    $("#{{ _ctrlPrefix }}Year").val("");
                case 1:
                    $("#{{ _ctrlPrefix }}Compo").val("");
                case 2:
                    $("#{{ _ctrlPrefix }}DiplomeCode").html("");
                    $("#{{ _ctrlPrefix }}Diplome").val("");
                case 3:
                    $("#{{ _ctrlPrefix }}EtapeCode").html("");
                    $("#{{ _ctrlPrefix }}Etape").val("");
                case 4:
                    try{ // cas ou selection étape => Num & NumCode n'existe pas ...
                        $("#{{ _ctrlPrefix }}Num").val("");
                        $("#_counter{{ _ctrlPrefix }}Num").html("");
                        $('#{{ _ctrlPrefix }}NumCode').html("");
                    }catch (e) {

                    }
            }
            _apoJsTools_{{ _ctrlPrefix }}.initTips();

        },
        normJSON: function (str) {
            if (str === null) {
                return ("?");
            } else {
                return (str.toString().replace(/'/g, "&apos;")).replace(/,/g, ", ");
            }
        }
    };

    //});
</script>
